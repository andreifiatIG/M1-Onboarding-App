# M1 Villa Management System - Production Docker Compose Configuration
# This file defines the complete production stack

version: '3.8'

networks:
  villa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  uploads-data:
    driver: local
  logs-data:
    driver: local
  backup-data:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: villa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ils_m1_villa_management}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - backup-data:/backups
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - villa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME:-ils_m1_villa_management}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_min_duration_statement=1000

  # Redis Cache (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: villa-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - villa-network
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ElectricSQL for real-time sync
  electric:
    image: electricsql/electric:latest
    container_name: villa-electric
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-ils_m1_villa_management}"
      ELECTRIC_WRITE_TO_PG_MODE: "direct_writes"
      AUTH_MODE: "insecure"
      ELECTRIC_PORT: 3000
    ports:
      - "${ELECTRIC_PORT:-3000}:3000"
    networks:
      - villa-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: villa-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4001
      DATABASE_URL: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-ils_m1_villa_management}?schema=public&sslmode=disable"
      REDIS_URL: "redis://redis:6379"
      ELECTRIC_URL: "http://electric:3000"
      ELECTRIC_SYNC_URL: "http://electric:3000/v1/shape"
      CORS_ORIGIN: "${FRONTEND_URL}"
      JWT_SECRET: "${JWT_SECRET}"
      ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
      SESSION_SECRET: "${SESSION_SECRET}"
      CLERK_SECRET_KEY: "${CLERK_SECRET_KEY}"
      CLERK_PUBLISHABLE_KEY: "${CLERK_PUBLISHABLE_KEY}"
      AZURE_CLIENT_ID: "${AZURE_CLIENT_ID}"
      AZURE_CLIENT_SECRET: "${AZURE_CLIENT_SECRET}"
      AZURE_TENANT_ID: "${AZURE_TENANT_ID}"
      SHAREPOINT_SITE_URL: "${SHAREPOINT_SITE_URL}"
      SHAREPOINT_DRIVE_ID: "${SHAREPOINT_DRIVE_ID}"
      SMTP_HOST: "${SMTP_HOST}"
      SMTP_PORT: "${SMTP_PORT}"
      SMTP_USER: "${SMTP_USER}"
      SMTP_PASS: "${SMTP_PASS}"
      SENTRY_DSN: "${SENTRY_DSN}"
      LOG_LEVEL: info
    ports:
      - "${BACKEND_PORT:-4001}:4001"
    volumes:
      - uploads-data:/app/uploads
      - logs-data:/app/logs
    networks:
      - villa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      electric:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: "${NEXT_PUBLIC_API_URL}"
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "${CLERK_PUBLISHABLE_KEY}"
        NEXT_PUBLIC_APP_URL: "${FRONTEND_URL}"
        NEXT_PUBLIC_ENVIRONMENT: production
    container_name: villa-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      CLERK_SECRET_KEY: "${CLERK_SECRET_KEY}"
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    networks:
      - villa-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: villa-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - villa-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service (optional)
  backup:
    image: postgres:16-alpine
    container_name: villa-backup
    restart: "no"
    environment:
      PGPASSWORD: "${DATABASE_PASSWORD}"
    volumes:
      - backup-data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - villa-network
    depends_on:
      - postgres
    command: ["/backup.sh"]
    profiles:
      - backup

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: villa-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - villa-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: villa-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:-admin}"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - villa-network
    profiles:
      - monitoring